version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./front-end-app
      dockerfile: Dockerfile
    expose:
      - "5173"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://backend:8000
    depends_on:
      - backend
    networks:
      - app-network

  # Backend FastAPI Service
  backend:
    build:
      context: ./fast-api
      dockerfile: Dockerfile
    expose:
      - "8000"
    volumes:
      - ./fast-api/models:/app/models
      - backend_hf_cache:/root/.cache/huggingface
      - ./cleaned:/static_files
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=j1chat
      - NEO4J_URI=neo4j://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - OLLAMA_HOST=ollama
      - OLLAMA_BASE_URL=http://ollama:11434
      - STATIC_FILES_PATH=/static_files
      - MODEL_PATH=/app/models/mxbai-embed-large-v1
      - CROSS_ENCODER_PATH=/app/models/cross-encoder
      - TRANSFORMERS_CACHE=/root/.cache/huggingface/transformers
      - HF_HOME=/root/.cache/huggingface
      - XDG_CACHE_HOME=/root/.cache
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      ollama:
        condition: service_started
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: ankane/pgvector:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: j1chat
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Neo4j Database
  neo4j:
    image: neo4j:5.11.0
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc"]'
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Database Loader Service
  db-loader:
    build:
      context: ./databases
      dockerfile: Dockerfile
    volumes:
      - ./databases/models:/app/models
      - db_loader_hf_cache:/root/.cache/huggingface
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: j1chat
      NEO4J_URI: neo4j://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: password
    networks:
      - app-network

  # Nginx Service
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/conf.d:/etc/nginx/conf.d
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./cleaned:/home/cm36/Final/full_test/cleaned:ro
    environment:
      - DOMAIN_NAME=localhost
      - SSL_ENABLED=false
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

  # Ollama Service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "ls -la /root/.ollama || exit 0"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "ollama serve"
    networks:
      - app-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # pgAdmin Service
  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    depends_on:
      - postgres
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  neo4j_data:
  neo4j_logs:
  ollama_data:
  backend_hf_cache:
  db_loader_hf_cache: 